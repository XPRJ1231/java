/**
 * 1.里氏替换原则（Liskov Substitution Principle, LSP）<br>
 * 任何父类可以出现的地方，子类也一定可以出现。
 * 子类在扩展父类的功能时，不应改变父类原有的行为。<br>
 * 例如，如果有一个方法接受一个父类对象作为参数，那么传入该方法的任何子类对象也都应该能使得方法正常工作。
 * <p>
 * 2.单一职责原则（Single Responsibility Principle, SRP）<br>
 * 一个类有且仅有一个改变其的理由，即一个类只负责一项职责。
 * <p>
 * 3.开闭原则（Open-Closed Principle, OCP）<br>
 * 对扩展开放，对修改关闭。
 * 设计时应该易于扩展，添加新功能时，尽量不修改现有代码，而是通过添加新代码来实现。
 * <p>
 * 4.接口隔离原则（Interface Segregation Principle, ISP）<br>
 * 指客户端不应该依赖它不需要的接口。这意味着设计接口时尽量细化接口，接口中的方法尽量少。
 * <p>
 * 5.依赖倒置原则（Dependency Inversion Principle, DIP）<br>
 * 指高层模块不应该依赖低层模块，二者都应该依赖其抽象；
 * 抽象不应该依赖细节，细节应该依赖抽象。设计时应针对接口编程，而不是实现类。
 * <p>
 * 6.迪米特法则<br>
 * 一个软件模块或对象应尽可能少的与其他模块或对象发生相互作用。
 */

package principle;